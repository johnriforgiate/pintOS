
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

John Riforgiate <johnriforgiate@k-state.edu>
Bryden Pollard <brydenp@k-state.edu>
...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.
Used: http://stuartharrell.com/blog/2016/12/16/efficient-alarm-clock/
as a reference to build the alarm clock. While we already had similar
code, it was very scattered and this website helped us understand how
to organize it better. There were many issues with this code including
poor optimization, overcomplication and not passing the required tests.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* List of sleeping processes.  Processes are added to this list
   when they are set to sleep and removed when they wake. */
static struct list sleeping_list;

/* Added a sleeping state to the enumerator to track the state
   of each thread. */
THREAD_SLEEPING,    /* Sleeping until a given time. */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep()
>> including the effects of the timer interrupt handler.
void
timer_sleep (int64_t ticks) 
{
  // If the param was negative or zero the program doesn't need to sleep.
  if(ticks <= 0) return; 
  // Assert that interrupts are on for debugging.
  ASSERT (intr_get_level () == INTR_ON);
  // Call the sleep_until function in thread.c that uses many vars there.
  sleep_until (timer_ticks() + time);
}
/* Takes in the exact time that the function should wake up. Then
   turns off interrupts, sets the status to sleeping, sets the 
   time to wake up and adds it to the sleeping queue. Finally it 
   calls schedule to allow another process to run and returns 
   interrupts to their previous state. */
void
sleep_until (int64_t ticks)
{
  // Saves a pointer to the current thread so we can edit it.
  struct thread *c = thread_current();
  // Turns off interrupts so that nobody else can access the data.
  enum intr_level old_level;
  old_level = intr_disable();
  // Sets the status to sleeping and sets the time for the program to wake up.
  c->status = THREAD_SLEEPING;
  c->wakeup_time = ticks;
  // Inserts the thread in the list of sleeping threads in order of which one needs to be woken first first.
  list_insert_ordered(&sleeping_list, &c->elem, sleep_LESS, NULL);
  // Calls the scheduler to start a new thread.
  schedule();
  // Returns interrupts back to the on state so they can be used again.
  intr_set_level(old_level);
}
/* LESS function to be passed in to the ordered list insert. Simply
   compares the wakeup_time of the two functions and returns
   true if the first wakeup time is less than the second.
*/
static bool
sleep_LESS(const struct list_elem *e1,
           const struct list_elem *e2,
 	   void *aux UNUSED)
{
  /* Casts current element to a list* type and compares the wakeup 
     time to the wakeup time of an element in the sleeping list.*/
  return list_entry(e1, struct thread, elem)->wakeup_time <
         list_entry(e2, struct thread, elem)->wakeup_time;
}
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
The only things that are being done inside the interrupt are the
editing of sensitive data that must be atomic. Everything else is 
calculated outside the interrupts.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
By disabling interrupts while editing sensitive data, no race
conditions can form. All of the operations that edit sensitive
data are performed atomically.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
Similarly to A4, by disabling interrupts on only the place we are
writing the data a timer interrupt will only be able to call 
timer_sleep after the short time it takes for the function to finish.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?
We chose this design due to its simplicity and previous documentation
in earlier sections of the code. Other areas of the code already
implement the turning on and off of interrupts flawlessly while there
were not good examples of the uses of locks/semaphores.

Advantages of the implementation we chose include the inclusion
of a simple queue that holds sleeping values and waits for them to
wake up. Turning off interrupts for a short time is also the simplest
way to solve this problem. Any access to data we perform is highly
optimized so that we can minimize the time a program is in an interrupt

Disadvantages of this implementation include the fact that interrupts
are briefly turned off when a lock or semaphore might be able to handle
the atomicity slightly more efficiently. We also use more space in the
kernel due to the implementation of a function to wake sleeping threads.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?
Every time we do a sema_down we insert it into the wait list based 
on its effective priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

